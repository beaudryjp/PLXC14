
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jan 11 18:17:01 CET 2020
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jan 11 18:17:01 CET 2020
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\032\002\000\002\033\002\000\002\005" +
    "\012\000\002\034\002\000\002\035\002\000\002\006\011" +
    "\000\002\036\002\000\002\007\012\000\002\037\002\000" +
    "\002\040\002\000\002\041\002\000\002\010\016\000\002" +
    "\042\002\000\002\043\002\000\002\011\013\000\002\044" +
    "\002\000\002\045\002\000\002\012\013\000\002\013\007" +
    "\000\002\046\002\000\002\047\002\000\002\014\007\000" +
    "\002\016\003\000\002\017\003\000\002\020\003\000\002" +
    "\021\003\000\002\023\003\000\002\024\003\000\002\022" +
    "\004\000\002\022\002\000\002\004\004\000\002\004\002" +
    "\000\002\050\002\000\002\051\002\000\002\026\007\000" +
    "\002\026\005\000\002\027\004\000\002\027\005\000\002" +
    "\027\003\000\002\027\002\000\002\030\003\000\002\025" +
    "\003\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\004\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\015\004\000\002\015\003\000\002\052\002\000\002\015" +
    "\006\000\002\015\005\000\002\015\003\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\004\000\002" +
    "\053\002\000\002\031\006\000\002\054\002\000\002\031" +
    "\006\000\002\031\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\034\004\010\006\020\013\030\021\022\022" +
    "\026\034\011\036\006\037\017\040\031\041\004\042\041" +
    "\043\024\044\037\001\002\000\004\042\uffcb\001\002\000" +
    "\042\002\ufff8\004\ufff8\006\ufff8\007\ufff8\013\ufff8\021\ufff8" +
    "\022\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041" +
    "\ufff8\042\ufff8\043\ufff8\044\ufff8\001\002\000\004\004\uffdd" +
    "\001\002\000\004\042\uffd4\001\002\000\016\004\010\013" +
    "\030\021\022\022\026\042\041\043\024\001\002\000\004" +
    "\004\uffde\001\002\000\042\002\ufff5\004\ufff5\006\ufff5\007" +
    "\ufff5\013\ufff5\021\ufff5\022\ufff5\034\ufff5\035\ufff5\036\ufff5" +
    "\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\001" +
    "\002\000\016\004\170\013\030\021\022\022\026\042\041" +
    "\043\024\001\002\000\042\002\ufffb\004\ufffb\006\ufffb\007" +
    "\ufffb\013\ufffb\021\ufffb\022\ufffb\034\ufffb\035\ufffb\036\ufffb" +
    "\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\001" +
    "\002\000\004\004\ufff1\001\002\000\040\002\000\004\000" +
    "\006\000\007\000\013\000\021\000\022\000\034\000\036" +
    "\000\037\000\040\000\041\000\042\000\043\000\044\000" +
    "\001\002\000\034\004\uffdc\006\uffdc\013\uffdc\021\uffdc\022" +
    "\uffdc\034\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\043\uffdc\044\uffdc\001\002\000\034\004\uffe1\006\uffe1\013" +
    "\uffe1\021\uffe1\022\uffe1\034\uffe1\036\uffe1\037\uffe1\040\uffe1" +
    "\041\uffe1\042\uffe1\043\uffe1\044\uffe1\001\002\000\036\002" +
    "\155\004\010\006\020\013\030\021\022\022\026\034\011" +
    "\036\006\037\017\040\031\041\004\042\041\043\024\044" +
    "\037\001\002\000\004\042\041\001\002\000\016\010\152" +
    "\012\062\013\057\014\067\015\064\017\060\001\002\000" +
    "\052\005\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc" +
    "\015\uffbc\017\uffbc\023\uffbc\024\uffbc\026\uffbc\027\uffbc\030" +
    "\uffbc\031\uffbc\032\uffbc\033\uffbc\037\uffbc\045\uffbc\046\uffbc" +
    "\047\uffbc\001\002\000\006\010\143\011\142\001\002\000" +
    "\004\042\041\001\002\000\034\004\uffee\006\uffee\013\uffee" +
    "\021\uffee\022\uffee\034\uffee\036\uffee\037\uffee\040\uffee\041" +
    "\uffee\042\uffee\043\uffee\044\uffee\001\002\000\016\004\010" +
    "\013\030\021\022\022\026\042\041\043\024\001\002\000" +
    "\004\004\125\001\002\000\060\005\uffc0\010\uffc0\011\uffc0" +
    "\012\uffc0\013\uffc0\014\uffc0\015\uffc0\017\uffc0\020\uffbf\021" +
    "\120\022\122\023\uffc0\024\uffc0\026\uffc0\027\uffc0\030\uffc0" +
    "\031\uffc0\032\uffc0\033\uffc0\037\uffc0\045\uffc0\046\uffc0\047" +
    "\uffc0\001\002\000\042\002\ufffa\004\ufffa\006\ufffa\007\ufffa" +
    "\013\ufffa\021\ufffa\022\ufffa\034\ufffa\035\ufffa\036\ufffa\037" +
    "\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\001\002" +
    "\000\004\004\043\001\002\000\042\002\ufff9\004\ufff9\006" +
    "\ufff9\007\ufff9\013\ufff9\021\ufff9\022\ufff9\034\ufff9\035\ufff9" +
    "\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044" +
    "\ufff9\001\002\000\042\002\ufff6\004\ufff6\006\ufff6\007\ufff6" +
    "\013\ufff6\021\ufff6\022\ufff6\034\ufff6\035\ufff6\036\ufff6\037" +
    "\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\001\002" +
    "\000\016\004\uffdb\013\uffdb\021\uffdb\022\uffdb\042\uffdb\043" +
    "\uffdb\001\002\000\042\002\ufffc\004\ufffc\006\ufffc\007\ufffc" +
    "\013\ufffc\021\ufffc\022\ufffc\034\ufffc\035\ufffc\036\ufffc\037" +
    "\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\001\002" +
    "\000\060\005\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014" +
    "\uffcc\015\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc" +
    "\024\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\037\uffcc\045\uffcc\046\uffcc\047\uffcc\001\002\000\042" +
    "\002\ufff7\004\ufff7\006\ufff7\007\ufff7\013\ufff7\021\ufff7\022" +
    "\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7" +
    "\042\ufff7\043\ufff7\044\ufff7\001\002\000\020\004\044\013" +
    "\030\021\022\022\026\025\047\042\041\043\024\001\002" +
    "\000\020\004\044\013\030\021\022\022\026\025\047\042" +
    "\041\043\024\001\002\000\010\005\ufff4\023\051\024\052" +
    "\001\002\000\030\012\062\013\057\014\067\015\064\017" +
    "\060\026\070\027\065\030\066\031\071\032\063\033\061" +
    "\001\002\000\020\004\044\013\030\021\022\022\026\025" +
    "\047\042\041\043\024\001\002\000\012\005\uffb5\010\uffb5" +
    "\023\uffb5\024\uffb5\001\002\000\020\004\uffb4\013\uffb4\021" +
    "\uffb4\022\uffb4\025\uffb4\042\uffb4\043\uffb4\001\002\000\020" +
    "\004\uffb2\013\uffb2\021\uffb2\022\uffb2\025\uffb2\042\uffb2\043" +
    "\uffb2\001\002\000\020\004\044\013\030\021\022\022\026" +
    "\025\047\042\041\043\024\001\002\000\012\005\uffb1\010" +
    "\uffb1\023\051\024\uffb1\001\002\000\020\004\044\013\030" +
    "\021\022\022\026\025\047\042\041\043\024\001\002\000" +
    "\012\005\uffb3\010\uffb3\023\uffb3\024\uffb3\001\002\000\016" +
    "\004\010\013\030\021\022\022\026\042\041\043\024\001" +
    "\002\000\016\004\010\013\030\021\022\022\026\042\041" +
    "\043\024\001\002\000\016\004\010\013\030\021\022\022" +
    "\026\042\041\043\024\001\002\000\016\004\010\013\030" +
    "\021\022\022\026\042\041\043\024\001\002\000\016\004" +
    "\010\013\030\021\022\022\026\042\041\043\024\001\002" +
    "\000\016\004\010\013\030\021\022\022\026\042\041\043" +
    "\024\001\002\000\016\004\010\013\030\021\022\022\026" +
    "\042\041\043\024\001\002\000\016\004\010\013\030\021" +
    "\022\022\026\042\041\043\024\001\002\000\016\004\010" +
    "\013\030\021\022\022\026\042\041\043\024\001\002\000" +
    "\016\004\010\013\030\021\022\022\026\042\041\043\024" +
    "\001\002\000\016\004\010\013\030\021\022\022\026\042" +
    "\041\043\024\001\002\000\024\005\uffb6\010\uffb6\012\062" +
    "\013\057\014\067\015\064\017\060\023\uffb6\024\uffb6\001" +
    "\002\000\024\005\uffb9\010\uffb9\012\062\013\057\014\067" +
    "\015\064\017\060\023\uffb9\024\uffb9\001\002\000\052\005" +
    "\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8" +
    "\017\uffc8\023\uffc8\024\uffc8\026\uffc8\027\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\037\uffc8\045\uffc8\046\uffc8\047\uffc8" +
    "\001\002\000\024\005\uffb8\010\uffb8\012\062\013\057\014" +
    "\067\015\064\017\060\023\uffb8\024\uffb8\001\002\000\024" +
    "\005\uffb7\010\uffb7\012\062\013\057\014\067\015\064\017" +
    "\060\023\uffb7\024\uffb7\001\002\000\052\005\uffc7\010\uffc7" +
    "\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\017\uffc7\023" +
    "\uffc7\024\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\037\uffc7\045\uffc7\046\uffc7\047\uffc7\001\002\000" +
    "\024\005\uffbb\010\uffbb\012\062\013\057\014\067\015\064" +
    "\017\060\023\uffbb\024\uffbb\001\002\000\052\005\uffca\010" +
    "\uffca\011\uffca\012\uffca\013\uffca\014\067\015\064\017\060" +
    "\023\uffca\024\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\033\uffca\037\uffca\045\uffca\046\uffca\047\uffca\001\002" +
    "\000\024\005\uffba\010\uffba\012\062\013\057\014\067\015" +
    "\064\017\060\023\uffba\024\uffba\001\002\000\052\005\uffc6" +
    "\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\017" +
    "\uffc6\023\uffc6\024\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\037\uffc6\045\uffc6\046\uffc6\047\uffc6\001" +
    "\002\000\052\005\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9" +
    "\014\067\015\064\017\060\023\uffc9\024\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\037\uffc9\045\uffc9" +
    "\046\uffc9\047\uffc9\001\002\000\004\005\106\001\002\000" +
    "\034\004\010\006\020\013\030\021\022\022\026\034\011" +
    "\036\006\037\017\040\031\041\004\042\041\043\024\044" +
    "\037\001\002\000\042\002\ufff3\004\ufff3\006\ufff3\007\ufff3" +
    "\013\ufff3\021\ufff3\022\ufff3\034\ufff3\035\ufff3\036\ufff3\037" +
    "\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\001\002" +
    "\000\042\002\uffd5\004\uffd5\006\uffd5\007\uffd5\013\uffd5\021" +
    "\uffd5\022\uffd5\034\uffd5\035\111\036\uffd5\037\uffd5\040\uffd5" +
    "\041\uffd5\042\uffd5\043\uffd5\044\uffd5\001\002\000\034\004" +
    "\010\006\020\013\030\021\022\022\026\034\011\036\006" +
    "\037\017\040\031\041\004\042\041\043\024\044\037\001" +
    "\002\000\042\002\ufff2\004\ufff2\006\ufff2\007\ufff2\013\ufff2" +
    "\021\ufff2\022\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040" +
    "\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\001\002\000\042" +
    "\002\uffd6\004\uffd6\006\uffd6\007\uffd6\013\uffd6\021\uffd6\022" +
    "\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6" +
    "\042\uffd6\043\uffd6\044\uffd6\001\002\000\010\005\117\023" +
    "\051\024\052\001\002\000\032\005\116\012\062\013\057" +
    "\014\067\015\064\017\060\026\070\027\065\030\066\031" +
    "\071\032\063\033\061\001\002\000\052\005\uffbd\010\uffbd" +
    "\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\017\uffbd\023" +
    "\uffbd\024\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd" +
    "\033\uffbd\037\uffbd\045\uffbd\046\uffbd\047\uffbd\001\002\000" +
    "\012\005\uffb0\010\uffb0\023\uffb0\024\uffb0\001\002\000\052" +
    "\005\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015" +
    "\uffc4\017\uffc4\023\uffc4\024\uffc4\026\uffc4\027\uffc4\030\uffc4" +
    "\031\uffc4\032\uffc4\033\uffc4\037\uffc4\045\uffc4\046\uffc4\047" +
    "\uffc4\001\002\000\004\020\123\001\002\000\052\005\uffc2" +
    "\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\017" +
    "\uffc2\023\uffc2\024\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\033\uffc2\037\uffc2\045\uffc2\046\uffc2\047\uffc2\001" +
    "\002\000\016\004\010\013\030\021\022\022\026\042\041" +
    "\043\024\001\002\000\052\005\uffbe\010\uffbe\011\uffbe\012" +
    "\062\013\057\014\067\015\064\017\060\023\uffbe\024\uffbe" +
    "\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\037" +
    "\uffbe\045\uffbe\046\uffbe\047\uffbe\001\002\000\016\004\010" +
    "\013\030\021\022\022\026\042\041\043\024\001\002\000" +
    "\016\005\127\012\062\013\057\014\067\015\064\017\060" +
    "\001\002\000\004\010\130\001\002\000\042\002\uffe2\004" +
    "\uffe2\006\uffe2\007\uffe2\013\uffe2\021\uffe2\022\uffe2\034\uffe2" +
    "\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043" +
    "\uffe2\044\uffe2\001\002\000\052\005\uffc5\010\uffc5\011\uffc5" +
    "\012\uffc5\013\uffc5\014\uffc5\015\uffc5\017\uffc5\023\uffc5\024" +
    "\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5" +
    "\037\uffc5\045\uffc5\046\uffc5\047\uffc5\001\002\000\034\004" +
    "\010\006\020\013\030\021\022\022\026\034\011\036\006" +
    "\037\017\040\031\041\004\042\041\043\024\044\037\001" +
    "\002\000\004\036\134\001\002\000\004\004\135\001\002" +
    "\000\020\004\044\013\030\021\022\022\026\025\047\042" +
    "\041\043\024\001\002\000\010\005\137\023\051\024\052" +
    "\001\002\000\004\010\140\001\002\000\042\002\uffed\004" +
    "\uffed\006\uffed\007\uffed\013\uffed\021\uffed\022\uffed\034\uffed" +
    "\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043" +
    "\uffed\044\uffed\001\002\000\052\005\uffc1\010\uffc1\011\uffc1" +
    "\012\uffc1\013\uffc1\014\uffc1\015\uffc1\017\uffc1\023\uffc1\024" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1" +
    "\037\uffc1\045\uffc1\046\uffc1\047\uffc1\001\002\000\012\010" +
    "\uffcd\011\uffcd\020\146\042\041\001\002\000\042\002\ufffe" +
    "\004\ufffe\006\ufffe\007\ufffe\013\ufffe\021\ufffe\022\ufffe\034" +
    "\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe" +
    "\043\ufffe\044\ufffe\001\002\000\010\010\uffce\011\uffce\020" +
    "\150\001\002\000\006\010\uffd1\011\uffd1\001\002\000\016" +
    "\004\010\013\030\021\022\022\026\042\041\043\024\001" +
    "\002\000\020\010\uffd0\011\uffd0\012\062\013\057\014\067" +
    "\015\064\017\060\001\002\000\016\004\010\013\030\021" +
    "\022\022\026\042\041\043\024\001\002\000\020\010\uffcf" +
    "\011\uffcf\012\062\013\057\014\067\015\064\017\060\001" +
    "\002\000\042\002\ufffd\004\ufffd\006\ufffd\007\ufffd\013\ufffd" +
    "\021\ufffd\022\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040" +
    "\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\001\002\000\052" +
    "\005\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015" +
    "\uffc3\017\uffc3\023\uffc3\024\uffc3\026\uffc3\027\uffc3\030\uffc3" +
    "\031\uffc3\032\uffc3\033\uffc3\037\uffc3\045\uffc3\046\uffc3\047" +
    "\uffc3\001\002\000\040\002\uffff\004\uffff\006\uffff\007\uffff" +
    "\013\uffff\021\uffff\022\uffff\034\uffff\036\uffff\037\uffff\040" +
    "\uffff\041\uffff\042\uffff\043\uffff\044\uffff\001\002\000\004" +
    "\002\001\001\002\000\034\004\010\006\020\013\030\021" +
    "\022\022\026\034\011\036\006\037\017\040\031\041\004" +
    "\042\041\043\024\044\037\001\002\000\036\004\010\006" +
    "\020\007\uffe0\013\030\021\022\022\026\034\011\036\006" +
    "\037\017\040\031\041\004\042\041\043\024\044\037\001" +
    "\002\000\004\007\161\001\002\000\042\002\uffdf\004\uffdf" +
    "\006\uffdf\007\uffdf\013\uffdf\021\uffdf\022\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf" +
    "\044\uffdf\001\002\000\004\004\163\001\002\000\020\004" +
    "\044\013\030\021\022\022\026\025\047\042\041\043\024" +
    "\001\002\000\010\005\ufff0\023\051\024\052\001\002\000" +
    "\004\005\166\001\002\000\034\004\010\006\020\013\030" +
    "\021\022\022\026\034\011\036\006\037\017\040\031\041" +
    "\004\042\041\043\024\044\037\001\002\000\042\002\uffef" +
    "\004\uffef\006\uffef\007\uffef\013\uffef\021\uffef\022\uffef\034" +
    "\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef" +
    "\043\uffef\044\uffef\001\002\000\016\004\010\013\030\021" +
    "\022\022\026\042\041\043\024\001\002\000\020\012\062" +
    "\013\057\014\067\015\064\017\060\045\172\047\173\001" +
    "\002\000\016\004\uffda\013\uffda\021\uffda\022\uffda\042\uffda" +
    "\043\uffda\001\002\000\016\004\uffd9\013\uffd9\021\uffd9\022" +
    "\uffd9\042\uffd9\043\uffd9\001\002\000\016\004\010\013\030" +
    "\021\022\022\026\042\041\043\024\001\002\000\016\004" +
    "\010\013\030\021\022\022\026\042\041\043\024\001\002" +
    "\000\020\012\062\013\057\014\067\015\064\017\060\037" +
    "\uffe5\046\uffe5\001\002\000\006\037\uffd7\046\200\001\002" +
    "\000\016\004\010\013\030\021\022\022\026\042\041\043" +
    "\024\001\002\000\004\037\202\001\002\000\034\004\uffe4" +
    "\006\uffe4\013\uffe4\021\uffe4\022\uffe4\034\uffe4\036\uffe4\037" +
    "\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\001\002" +
    "\000\034\004\010\006\020\013\030\021\022\022\026\034" +
    "\011\036\006\037\017\040\031\041\004\042\041\043\024" +
    "\044\037\001\002\000\042\002\uffe3\004\uffe3\006\uffe3\007" +
    "\uffe3\013\uffe3\021\uffe3\022\uffe3\034\uffe3\035\uffe3\036\uffe3" +
    "\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\001" +
    "\002\000\016\012\062\013\057\014\067\015\064\017\060" +
    "\037\uffd8\001\002\000\020\012\062\013\057\014\067\015" +
    "\064\017\060\037\uffe8\046\uffe8\001\002\000\006\037\uffd7" +
    "\046\200\001\002\000\004\037\211\001\002\000\034\004" +
    "\uffe7\006\uffe7\013\uffe7\021\uffe7\022\uffe7\034\uffe7\036\uffe7" +
    "\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\001" +
    "\002\000\034\004\010\006\020\013\030\021\022\022\026" +
    "\034\011\036\006\037\017\040\031\041\004\042\041\043" +
    "\024\044\037\001\002\000\042\002\uffe6\004\uffe6\006\uffe6" +
    "\007\uffe6\013\uffe6\021\uffe6\022\uffe6\034\uffe6\035\uffe6\036" +
    "\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6" +
    "\001\002\000\020\005\116\010\215\012\062\013\057\014" +
    "\067\015\064\017\060\001\002\000\020\004\uffec\013\uffec" +
    "\021\uffec\022\uffec\025\uffec\042\uffec\043\uffec\001\002\000" +
    "\020\004\044\013\030\021\022\022\026\025\047\042\041" +
    "\043\024\001\002\000\010\010\220\023\051\024\052\001" +
    "\002\000\016\004\uffeb\013\uffeb\021\uffeb\022\uffeb\042\uffeb" +
    "\043\uffeb\001\002\000\016\004\010\013\030\021\022\022" +
    "\026\042\041\043\024\001\002\000\016\005\223\012\062" +
    "\013\057\014\067\015\064\017\060\001\002\000\034\004" +
    "\uffea\006\uffea\013\uffea\021\uffea\022\uffea\034\uffea\036\uffea" +
    "\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea\001" +
    "\002\000\034\004\010\006\020\013\030\021\022\022\026" +
    "\034\011\036\006\037\017\040\031\041\004\042\041\043" +
    "\024\044\037\001\002\000\042\002\uffe9\004\uffe9\006\uffe9" +
    "\007\uffe9\013\uffe9\021\uffe9\022\uffe9\034\uffe9\035\uffe9\036" +
    "\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9" +
    "\001\002\000\016\005\116\012\062\013\057\014\067\015" +
    "\064\017\060\001\002\000\004\042\230\001\002\000\012" +
    "\010\uffd3\011\uffd3\020\uffd3\042\uffd3\001\002\000\012\010" +
    "\uffcd\011\uffcd\020\146\042\041\001\002\000\006\010\uffd2" +
    "\011\uffd2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\046\002\020\003\015\005\037\006\013\007" +
    "\032\010\034\011\004\012\041\013\035\014\011\015\022" +
    "\016\033\017\014\020\026\021\012\025\006\026\024\030" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\226\001\001\000\006\015\225\030" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\170\030\031\001\001\000\002\001\001\000\004\034" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\155\001\001\000\044\003\153\005\037\006\013\007" +
    "\032\010\034\011\004\012\041\013\035\014\011\015\022" +
    "\016\033\017\014\020\026\021\012\025\006\026\024\030" +
    "\031\001\001\000\004\030\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\140\001" +
    "\001\000\004\036\131\001\001\000\006\015\130\030\031" +
    "\001\001\000\002\001\001\000\004\052\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\045\030\031\031\044" +
    "\001\001\000\010\015\114\030\031\031\113\001\001\000" +
    "\004\032\104\001\001\000\002\001\001\000\010\015\045" +
    "\030\031\031\047\001\001\000\002\001\001\000\004\053" +
    "\054\001\001\000\004\054\052\001\001\000\010\015\045" +
    "\030\031\031\053\001\001\000\002\001\001\000\010\015" +
    "\045\030\031\031\055\001\001\000\002\001\001\000\006" +
    "\015\103\030\031\001\001\000\006\015\102\030\031\001" +
    "\001\000\006\015\101\030\031\001\001\000\006\015\100" +
    "\030\031\001\001\000\006\015\077\030\031\001\001\000" +
    "\006\015\076\030\031\001\001\000\006\015\075\030\031" +
    "\001\001\000\006\015\074\030\031\001\001\000\006\015" +
    "\073\030\031\001\001\000\006\015\072\030\031\001\001" +
    "\000\006\015\071\030\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\003\106\005\037\006\013\007" +
    "\032\010\034\011\004\012\041\013\035\014\011\015\022" +
    "\016\033\017\014\020\026\021\012\025\006\026\024\030" +
    "\031\001\001\000\004\033\107\001\001\000\004\004\111" +
    "\001\001\000\044\003\112\005\037\006\013\007\032\010" +
    "\034\011\004\012\041\013\035\014\011\015\022\016\033" +
    "\017\014\020\026\021\012\025\006\026\024\030\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\123\030\031\001\001\000\002\001\001\000\006\015" +
    "\125\030\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\003\132\005" +
    "\037\006\013\007\032\010\034\011\004\012\041\013\035" +
    "\014\011\015\022\016\033\017\014\020\026\021\012\025" +
    "\006\026\024\030\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\045\030\031\031\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\144\030\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\146" +
    "\030\031\001\001\000\002\001\001\000\006\015\150\030" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\002" +
    "\156\003\015\005\037\006\013\007\032\010\034\011\004" +
    "\012\041\013\035\014\011\015\022\016\033\017\014\020" +
    "\026\021\012\025\006\026\024\030\031\001\001\000\046" +
    "\003\153\005\037\006\013\007\032\010\034\011\004\012" +
    "\041\013\035\014\011\015\022\016\033\017\014\020\026" +
    "\021\012\025\006\026\024\030\031\047\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\045\030\031\031\163\001\001\000\004\035\164\001" +
    "\001\000\002\001\001\000\044\003\166\005\037\006\013" +
    "\007\032\010\034\011\004\012\041\013\035\014\011\015" +
    "\022\016\033\017\014\020\026\021\012\025\006\026\024" +
    "\030\031\001\001\000\002\001\001\000\006\015\213\030" +
    "\031\001\001\000\006\023\173\024\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\205\030\031\001" +
    "\001\000\006\015\175\030\031\001\001\000\004\044\176" +
    "\001\001\000\004\022\200\001\001\000\006\015\204\030" +
    "\031\001\001\000\002\001\001\000\004\045\202\001\001" +
    "\000\044\003\203\005\037\006\013\007\032\010\034\011" +
    "\004\012\041\013\035\014\011\015\022\016\033\017\014" +
    "\020\026\021\012\025\006\026\024\030\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\206\001\001" +
    "\000\004\022\207\001\001\000\002\001\001\000\004\043" +
    "\211\001\001\000\044\003\212\005\037\006\013\007\032" +
    "\010\034\011\004\012\041\013\035\014\011\015\022\016" +
    "\033\017\014\020\026\021\012\025\006\026\024\030\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\215\001\001\000\010\015\045\030\031\031\216\001\001" +
    "\000\002\001\001\000\004\040\220\001\001\000\006\015" +
    "\221\030\031\001\001\000\002\001\001\000\004\041\223" +
    "\001\001\000\044\003\224\005\037\006\013\007\032\010" +
    "\034\011\004\012\041\013\035\014\011\015\022\016\033" +
    "\017\014\020\026\021\012\025\006\026\024\030\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\230\001\001\000\006\027\231\030\143\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // condition ::= OP condition CP 
            {
              Tag RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // condition ::= condition OR NT$18 condition 
            {
              Tag RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Tag) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag c2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.operator(Generator.OR, c1, c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$18 ::= 
            {
              Tag RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  Generator.label(c1.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // condition ::= condition AND NT$17 condition 
            {
              Tag RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Tag) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag c2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.operator(Generator.AND, c1, c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$17 ::= 
            {
              Tag RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  Generator.label(c1.getT()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // condition ::= NOT condition 
            {
              Tag RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.operator(Generator.NOT, c1, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // condition ::= expression GTOREQ expression 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.condition(Generator.GTOREQ, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // condition ::= expression GT expression 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.condition(Generator.GT, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condition ::= expression LTOREQ expression 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.condition(Generator.LTOREQ, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // condition ::= expression LT expression 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.condition(Generator.LT, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // condition ::= expression NOTEQ expression 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.condition(Generator.NOTEQ, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // condition ::= expression EQ expression 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.condition(Generator.EQ, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= NUMBER 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= OP expression CP 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= variable NT$16 ASIG expression 
            {
              String RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = v;
                                                                        Generator.assignment(v, e);
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$16 ::= 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  if(!SymbolTable.find(v))
                                                                            Generator.varNotDeclared(v); 
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= variable 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(!SymbolTable.find(v))
                                                                            Generator.varNotDeclared(v); 
                                                                        else
                                                                            RESULT = v;
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= DEC variable 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(!SymbolTable.find(v))
                                                                            Generator.varNotDeclared(v); 
                                                                        RESULT = Generator.increment(Generator.DECL, v);
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= variable DEC 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  if(!SymbolTable.find(v))
                                                                            Generator.varNotDeclared(v); 
                                                                        RESULT = Generator.increment(Generator.DECR, v);
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= INC variable 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(!SymbolTable.find(v))
                                                                            Generator.varNotDeclared(v); 
                                                                        RESULT = Generator.increment(Generator.INCL, v);
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= variable INC 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  if(!SymbolTable.find(v))
                                                                            Generator.varNotDeclared(v); 
                                                                        RESULT = Generator.increment(Generator.INCR, v);
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= MINUS expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.arithmetic(Generator.MIN, e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= expression MOD expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.arithmetic(Generator.MOD, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= expression DIV expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.arithmetic(Generator.DIV, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= expression MUL expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.arithmetic(Generator.MUL, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= expression MINUS expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.arithmetic(Generator.MINUS, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= expression PLUS expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = Generator.arithmetic(Generator.PLUS, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= INT 
            {
              String RESULT =null;
		  RESULT = Type.INT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // variable ::= VAR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  String tmp = SymbolTable.varBlock(v);
                                                                        if(SymbolTable.find(v)){
                                                                            if(SymbolTable.findInCurrentBlock(tmp)){ RESULT = tmp; }
                                                                            else {
                                                                                int blk = SymbolTable.inWhichBlock(v); 
                                                                                if(blk > 0){ RESULT = v + "_" + blk; }
                                                                                else { RESULT = v; }
                                                                            }
                                                                        }
                                                                        else { RESULT = v; } 
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // valueDeclaration ::= 
            {
              String RESULT =null;
		  RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valueDeclaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // valueDeclaration ::= variable 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valueDeclaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // valueDeclaration ::= variable ASIG expression 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = v; 
                                                                        Generator.assignment(v, e); 
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valueDeclaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // valueDeclaration ::= ASIG expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valueDeclaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // varDeclaration ::= varDeclaration COMMA valueDeclaration 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(SymbolTable.findInCurrentBlock(v)){
                                                                            Generator.varDeclared(v);
                                                                        }
                                                                        else{
                                                                            if(SymbolTable.find(v) && SymbolTable.getIndex() > 0)
                                                                                SymbolTable.put(SymbolTable.varBlock(v), t);
                                                                            else
                                                                                SymbolTable.put(v, t);
                                                                        }
                                                                        if(Generator.DEBUG) SymbolTable.showTable(); 
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclaration",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // varDeclaration ::= type NT$14 VAR NT$15 valueDeclaration 
            {
              String RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  String tmp = SymbolTable.varBlock(v);
                                                                        if(val != null){
                                                                            if(SymbolTable.find(v) && SymbolTable.getIndex() > 0)
                                                                                Generator.assignment(tmp, val);
                                                                            else
                                                                                Generator.assignment(v, val); 
                                                                        }
                                                                        if(SymbolTable.find(v) && SymbolTable.getIndex() > 0)
                                                                            SymbolTable.put(tmp, t);
                                                                        else
                                                                            SymbolTable.put(v, t); 
                                                                        if(Generator.DEBUG) SymbolTable.showTable(); 
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclaration",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$15 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  if(SymbolTable.findInCurrentBlock(v))
                                                                            Generator.varDeclared(v);   
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$14 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // elseCond ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseCond",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // elseCond ::= ELSE sentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseCond",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stepPart ::= 
            {
              String RESULT =null;
		  RESULT = "1"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stepPart",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stepPart ::= STEP expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stepPart",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // downToPart ::= DOWNTO 
            {
              String RESULT =null;
		  RESULT = Generator.newLabel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("downToPart",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // toPart ::= TO 
            {
              String RESULT =null;
		  RESULT = Generator.newLabel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("toPart",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // forPART ::= FOR 
            {
              String RESULT =null;
		  RESULT = Generator.newLabel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forPART",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // doPART ::= DO 
            {
              String RESULT =null;
		  RESULT = Generator.newLabel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("doPART",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // whilePART ::= WHILE 
            {
              String RESULT =null;
		  RESULT = Generator.newLabel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whilePART",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ifPART ::= IF 
            {
              String RESULT =null;
		  RESULT = Generator.newLabel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifPART",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // block ::= OB NT$12 listSentence NT$13 CB 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  SymbolTable.endBlock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$12 ::= 
            {
              Object RESULT =null;
  SymbolTable.startBlock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // printSentence ::= PRINT OP expression CP SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = Generator.print(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printSentence",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // forDownToSentence ::= forPART expression downToPart expression NT$10 stepPart DO NT$11 sentence 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String to = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  
                                                                                        Generator.gotoLabel(to);
                                                                                        Generator.label( ((Tag) RESULT).getF() );
                                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forDownToSentence",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String to = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  Generator.loopCounter(Generator.MINUS, e1, s);
                                                                                        Generator.gotoLabel(tag);
                                                                                        Generator.label( ((Tag) RESULT).getT() );
                                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$10 ::= 
            {
              Object RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String to = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  Generator.label(tag);
                                                                                        RESULT = Generator.condition(Generator.GTOREQ, e1, e2);
                                                                                        Generator.label(to);
                                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // forToSentence ::= forPART expression toPart expression NT$8 stepPart DO NT$9 sentence 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String to = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  
                                                                                        Generator.gotoLabel(to);
                                                                                        Generator.label( ((Tag) RESULT).getF() );
                                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forToSentence",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String to = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  Generator.loopCounter(Generator.PLUS, e1, s);
                                                                                        Generator.gotoLabel(tag);
                                                                                        Generator.label( ((Tag) RESULT).getT() );
                                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$8 ::= 
            {
              Object RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String to = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  Generator.label(tag);
                                                                                        RESULT = Generator.condition(Generator.LTOREQ, e1, e2);
                                                                                        Generator.label(to);
                                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // forSentence ::= forPART OP expression SEMICOLON NT$5 condition SEMICOLON NT$6 expression CP NT$7 sentence 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  Generator.gotoLabel(RESULT.toString());  
                                                                        Generator.label(c.getF()); 
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forSentence",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  Generator.gotoLabel(tag);  
                                                                        Generator.label(c.getT()); 
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  RESULT = Generator.newLabel();  
                                                                        Generator.label(RESULT.toString()); 
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$5 ::= 
            {
              Object RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  Generator.label(tag); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // doWhileSentence ::= doPART NT$4 sentence WHILE OP condition CP SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  Generator.label(c.getT());  
                                                                        Generator.gotoLabel(tag);  
                                                                        Generator.label(c.getF()); 
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("doWhileSentence",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$4 ::= 
            {
              Object RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  Generator.label(tag); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // whileSentence ::= whilePART NT$2 OP condition NT$3 CP sentence 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  Generator.gotoLabel(tag);  
                                                                        Generator.label(c.getF()); 
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileSentence",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  Generator.label(c.getT()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$2 ::= 
            {
              Object RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  Generator.label(tag); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ifSentence ::= ifPART OP condition NT$0 CP sentence NT$1 elseCond 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  Generator.label(tag); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifSentence",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
  Generator.gotoLabel(tag);  
                                                                        Generator.label(c.getF()); 
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$0 ::= 
            {
              Object RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  Generator.label(c.getT()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentence ::= block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentence ::= printSentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentence ::= forDownToSentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentence ::= forToSentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentence ::= forSentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentence ::= doWhileSentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentence ::= whileSentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentence ::= ifSentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentence ::= expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentence ::= varDeclaration SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listSentence ::= listSentence sentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listSentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // listSentence ::= sentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listSentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= listSentence EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

